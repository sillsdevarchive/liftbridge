<?xml version="1.0" encoding="UTF-8"?>
<!-- These variables define the Windows Installer product version, product code and upgrade code. They   -->
<!-- will be used later on in this file.  this value should be B U I  LD_SCRIPT_MUST_REPLACE_AT_RUNTIME  (in quotes)-->
<!--The version number is replaced at build time by the msbuild 'package' target -->
<?define Property_ProductVersion = ".*" ?>
<!-- Generate a new one for each installer, since it only uses the major upgrade approach for msi installers.
cf: http://wix.sourceforge.net/manual-wix3/major_upgrade.htm
and http://www.joyofsetup.com/2010/01/16/major-upgrades-now-easier-than-ever/
for details on why going the major upgrade route is the right answer for an msi-only install system.
-->
<?define Property_ProductCode = "*" ?>
<!--Don't even think of EVER changing the Property_UpgradeCode. -->
<?define Property_UpgradeCode = "5A4A5F1B-C24F-43BF-A157-73CC50471B3F" ?>

<!-- good intro to the component vs. file thing, and why each file here is a separate component:
http://blogs.msdn.com/robmen/archive/2003/10/04/56479.aspx -->
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi" xmlns:netfx="http://schemas.microsoft.com/wix/NetFxExtension">

  <Product Id="$(var.Property_ProductCode)" Name="LIFT Bridge $(var.Property_ProductVersion)" Language="1033" Version="$(var.Property_ProductVersion)" Manufacturer="SIL" UpgradeCode="$(var.Property_UpgradeCode)">

	<!-- autogenerated package id -->
	<Package Id="*" Compressed="yes" InstallerVersion="200"/>

	<UIRef Id="WixUI_Minimal"/>
	<WixVariable Id="WixUILicenseRtf" Value="..\..\distfiles\License.rtf"/>

	<MajorUpgrade AllowDowngrades="no" DowngradeErrorMessage="A newer version of [ProductName] is already installed. Setup will now exit." Schedule="afterInstallValidate"/>

	<!-- The following will set properties A[FW7INSTALLDIR] and B[DEVFW7INSTALLDIR] to the result of two different registry searches.
	If the search for B[DEVFW7INSTALLDIR] was successful, it overrides the value of A[FW7INSTALLDIR] with the value of B[DEVFW7INSTALLDIR].
	See: http://stackoverflow.com/questions/1690162/wix-set-a-property-based-on-a-condition -->
	<Property Id="FW7INSTALLDIR">
	  <RegistrySearch Id="SearchForFW7" Root="HKLM" Key="SOFTWARE\[Manufacturer]\FieldWorks\7.0" Name="RootCodeDir" Type="raw"/>
	</Property>
	<Property Id="FIELDWORKSMINIMUMINSTALLEDVERSION">
	  <DirectorySearch Id="FWVersion" Path="[FW7INSTALLDIR]">
		<!-- 7.3.0.0 was the actual released number, but I understand one then needs to go one notch under that to find 7.2.0.40926 -->
		<FileSearch Name="FieldWorks.exe" MinVersion="7.3.0.0"/>
	  </DirectorySearch>
	</Property>
	<Property Id="DEVFW7BUILDDIR">
		<!-- Devs (only) have this registry entry. -->
	  <RegistrySearch Id="SearchForFW7DevDir" Root="HKLM" Key="SOFTWARE\[Manufacturer]\FieldWorks\7.0" Name="FwExeDir" Type="raw"/>
	</Property>
	<Property Id="DEVFIELDWORKSMINIMUMINSTALLEDVERSION">
	  <DirectorySearch Id="DevFWVersion" Path="[DEVFW7BUILDDIR]">
		<!-- 7.3.0.0 was the actual released number, but I understand one then needs to go one notch under that to find 7.2.0.40926 -->
		<FileSearch Name="FieldWorks.exe" MinVersion="7.3.0.0"/>
	  </DirectorySearch>
	</Property>

	<!-- Use the dev entry, but only if set.
	Ken wants it installed in RootCodeDir, but using FwExeDir to check the FieldWorks.exe version.
	He then uses a nant script to copy stuff into his output\foo folder, which gets clobbered for every remakefw.
	<SetProperty Id="FW7INSTALLDIR" Before="SetFIELDWORKSMINIMUMINSTALLEDVERSION" Value="[DEVFW7BUILDDIR]">DEVFW7BUILDDIR</SetProperty>-->
	<SetProperty Id="FIELDWORKSMINIMUMINSTALLEDVERSION" Before="LaunchConditions" Value="[DEVFIELDWORKSMINIMUMINSTALLEDVERSION]">DEVFIELDWORKSMINIMUMINSTALLEDVERSION</SetProperty>

	<!--
	"from the list: Don't use Advertise="yes" Advertised shortcuts are designed to allow
users to install just the shortcut for your app, then demand-install the
rest of the app the first time the icon is run.  If this is not behavior you
are trying to support, you're better off using non-advertised shortcuts. "-->
	<Condition Message="Before [ProductName] can install, you need to install SIL's FieldWorks 7.3, or higher.">
	  <![CDATA[Installed OR FIELDWORKSMINIMUMINSTALLEDVERSION]]>
	</Condition>

	<PropertyRef Id="NETFRAMEWORK35"/>
	<Condition Message="Before [ProductName] can install, you need to install Microsoft's free .NET Framework 3.5.">
	  <![CDATA[Installed OR NETFRAMEWORK35]]>
	</Condition>

	<!--because of bug, this needs to be 1 -->
	<Property Id="ALLUSERS">1</Property>

	<Media Id="1" Cabinet="LiftBridge.cab" EmbedCab="yes"/>

	<Directory Id="TARGETDIR" Name="SourceDir">
	  <Directory Id="ProgramFilesFolder" Name="PFiles">
		<Directory Id="SILDIR" Name="SIL">
		  <Directory Id="INSTALLDIR" Name="LIFT Bridge">

			<Component Id="LiftBridgeexe" Guid="C1EDE2E8-E382-11DE-8A39-0800200C9A66">
			  <File Id="LiftBridge.exe" Name="LiftBridge.exe" KeyPath="yes" Source="..\..\output\Release\LiftBridge.exe"/>
			</Component>
			<Component Id="LiftBridgeexepdb" Guid="C1EDE2E9-E382-11DE-8A39-0800200C9A66">
			  <File Id="LiftBridge.pdb" Name="LiftBridge.pdb" KeyPath="yes" Source="..\..\output\Release\LiftBridge.pdb"/>
			</Component>
			<Component Id="LiftBridgeChorusPlugindll" Guid="C1EDE2EA-E382-11DE-8A39-0800200C9A66">
			  <File Id="LiftBridge-ChorusPlugin.dll" Name="LiftBridge-ChorusPlugin.dll" KeyPath="yes" Source="..\..\output\Release\LiftBridge-ChorusPlugin.dll"/>
			</Component>
			<Component Id="LiftBridgeChorusPluginpdb" Guid="C1EDE2EB-E382-11DE-8A39-0800200C9A66">
			  <File Id="LiftBridge-ChorusPlugin.pdb" Name="LiftBridge-ChorusPlugin.pdb" KeyPath="yes" Source="..\..\output\Release\LiftBridge-ChorusPlugin.pdb"/>
			</Component>

			<Component Id="RegInstallationDir" Guid="C1EDE2EC-E382-11DE-8A39-0800200C9A66">
			  <RegistryKey Id="keyLiftBridge.exe" Action="createAndRemoveOnUninstall" Root="HKLM" Key="SOFTWARE\[Manufacturer]\LIFT Bridge\7">
				<RegistryValue Id="LiftBridgeInstallationDir" Type="string" Value="[INSTALLDIR]" Name="InstallationDir"/>
			  </RegistryKey>
			</Component>
			<Component Id="Autofac.dll" Guid="C1EDE2ED-E382-11DE-8A39-0800200C9A66">
			  <File Id="Autofac.dll" Name="Autofac.dll" KeyPath="yes" Source="..\..\output\Release\Autofac.dll"/>
			</Component>
			<Component Id="Chorus.pdb" Guid="C1EDE2EE-E382-11DE-8A39-0800200C9A66">
			  <File Id="Chorus.pdb" Name="Chorus.pdb" KeyPath="yes" Source="..\..\output\Release\Chorus.pdb"/>
			</Component>
			<Component Id="ChorusHub.pdb" Guid="C1EDE2F5-E382-11DE-8A39-0800200C9A66">
			  <File Id="ChorusHub.pdb" Name="ChorusHub.pdb" KeyPath="yes" Source="..\..\output\Release\ChorusHub.pdb"/>
			</Component>
			<Component Id="ChorusMerge.pdb" Guid="C1EDE2EF-E382-11DE-8A39-0800200C9A66">
			  <File Id="ChorusMerge.pdb" Name="ChorusMerge.pdb" KeyPath="yes" Source="..\..\output\Release\ChorusMerge.pdb"/>
			</Component>
			<Component Id="LibChorus.pdb" Guid="C1EDE2F0-E382-11DE-8A39-0800200C9A66">
			  <File Id="LibChorus.pdb" Name="LibChorus.pdb" KeyPath="yes" Source="..\..\output\Release\LibChorus.pdb"/>
			</Component>
			<Component Id="Palaso.dll" Guid="C1EDE2F1-E382-11DE-8A39-0800200C9A66">
			  <File Id="Palaso.dll" Name="Palaso.dll" KeyPath="yes" Source="..\..\output\Release\Palaso.dll"/>
			</Component>
			<Component Id="Palaso.pdb" Guid="C1EDE2F6-E382-11DE-8A39-0800200C9A66">
			  <File Id="Palaso.pdb" Name="Palaso.pdb" KeyPath="yes" Source="..\..\output\Release\Palaso.pdb"/>
			</Component>
			<Component Id="PalasoUIWindowsForms.dll" Guid="C1EDE2F2-E382-11DE-8A39-0800200C9A66">
			  <File Id="PalasoUIWindowsForms.dll" Name="PalasoUIWindowsForms.dll" KeyPath="yes" Source="..\..\output\Release\PalasoUIWindowsForms.dll"/>
			</Component>
			<Component Id="PalasoUIWindowsForms.pdb" Guid="C1EDE2F7-E382-11DE-8A39-0800200C9A66">
			  <File Id="PalasoUIWindowsForms.pdb" Name="PalasoUIWindowsForms.pdb" KeyPath="yes" Source="..\..\output\Release\PalasoUIWindowsForms.pdb"/>
			</Component>
			<Component Id="icu.net.dll" Guid="C1EDE2F3-E382-11DE-8A39-0800200C9A66">
			  <File Id="icu.net.dll" Name="icu.net.dll" KeyPath="yes" Source="..\..\output\Release\icu.net.dll"/>
			</Component>

			<Merge Id="ChorusMergeModule" Language="1033" SourceFile="..\..\lib\ChorusMergeModule.msm" DiskId="1"/>

		  </Directory>
		</Directory>
	  </Directory>
	</Directory>

	<Feature Id="ProductFeature" Level="1" Title="[ProductName]" Description="Complete system.">
	  <ComponentRef Id="LiftBridgeexe"/>
	  <ComponentRef Id="LiftBridgeexepdb"/>
	  <ComponentRef Id="LiftBridgeChorusPlugindll"/>
	  <ComponentRef Id="LiftBridgeChorusPluginpdb"/>

	  <ComponentRef Id="RegInstallationDir"/>
	  <ComponentRef Id="Autofac.dll"/>
	  <ComponentRef Id="LibChorus.pdb"/>
	  <ComponentRef Id="Chorus.pdb"/>
	  <ComponentRef Id="ChorusHub.pdb"/>
	  <ComponentRef Id="ChorusMerge.pdb"/>
	  <ComponentRef Id="Palaso.dll"/>
	  <ComponentRef Id="Palaso.pdb"/>
	  <ComponentRef Id="PalasoUIWindowsForms.dll"/>
	  <ComponentRef Id="PalasoUIWindowsForms.pdb"/>
	  <ComponentRef Id="icu.net.dll"/>

	  <MergeRef Id="ChorusMergeModule" />

	  <!-- Generated components (originally, but now stored in Mercurial). Regenerate, if the contents change, or hand-edit, for say DistFiles. -->
	  <ComponentGroupRef Id="DistFiles"/>
	</Feature>

	<!-- what you see in add/remove programs control panel -->
	<Icon Id="LiftBridge.ico" SourceFile="..\..\artwork\chorus.ico"/>
	<Property Id="ARPPRODUCTICON" Value="LiftBridge.ico"/>
  </Product>
</Wix>
